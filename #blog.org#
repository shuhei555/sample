#+STARTUP: indent nolineimages
#+SETUPFILE: ~/.emacs.d/org-mode/theme-readtheorg.setup
#+options: ^:{}

* head
- blog
* license
-      cc by Shuhei Yamaguchi, 2019
*blog

* 課題
- roman_numeralのrspecを作る
- 下記のurlのfizzbuzをとりあえず写してみる(https://qiita.com/tbpgr/items/41730edcdb07bb5b59ad)
- 岡端が作成したmy_helpのthorをテストしていく

* 課題
- arubaとcucumberの関係性を調べる,どのようにテストを書いていくかのサンプルを見せるmy_helpのarubaによるテストの作成
- jekyllでblog立ち上げる,githubとの連携

* aruba
spec.add_development_dependency "aruba"追加後のbundle installでffiに関してエラーが出た場合
Gemfileにgem 'ffi', '= 1.9.21'追加

run(’ruby novice my helloruby’) ruby novice の my helloruby を実行する.
expected = ”Hello, Ruby.” 期待している結果. test::unit でいう第1引数である. expect(last command started).to be successfully executed status 0 で終了していること
を確認. このコードでエラーなく終了したことを確認する.
expect(last command started).to have output(expected) 出力が contents であることを
確認, 正規表現も使用可能である.このコードで期待値=実際の値であるかを検証します.両者が一致すればテストをパスし, 一致しない場合はテストが失敗する.
* Thor
** gemひな形の作成
1. bundle gem samplegem -b --test
2. ~.gemspecを編集
   spec.summary       = %q{Convert textile to markdown.}
   spec.description   = %q{Convert textile to markdown.}
   spec.homepage      = "https://github.com/YumaInaura/textile2md"
   に変更
3. bundle install

* jekyll
** 概要
- 静的サイトを作るためのジェネレーター
- マークダウン記法
** 公式サイト
jekyllrb.com
** インストール
gem bundle install
** 使い方
- 作業ディレクトリ作成　mkdir~
- フォルダ作成　jekyll new ~
- HTMLファイル群作成 jekyll build 
  エラー出たら　bundle exec jekyll build
- サーバー立ち上げ bundle serve
  エラー出たら　bundle exec jekyll serve

* ゼミ
bundle exec rake install local
git clone
rake
bundle update
bundle exec 
* 課題2
1) jekyllのインストールの手順の問題点
2) jekyllを動かせるようにする
3) arubaの導入，書き方　http://rikuga.me/2018/03/17/how-to-create-gem-using-thor/
- src -> lib
- bundle gem test -b
* RSpec
RSPEC.DESCRIBE クラス名DO
 IT "" DO
 END
END

** EXPECT(A).TO EQ B
AとBが等しいか比べる
** RSPEC --INIT
CREATE   SPEC/SPEC_HELPER.RB
CREATE   .RSPEC
参考HTTPS://QIITA.COM/LUCKYPOOL/ITEMS/E3662170033347510C3C
    HTTP://QS.NNDO.JP/UNIT-TEST-BY-RUBY-WITH-RSPEC

* require_relative
実行したいファイルのディレクトリからの相対パスで書く
* QUESTION<2019-06-24 月 12:33>

那須

1. TDDのイメージが構造のテスト中心とありますが構造のテストとは
   - テストとは二種類
     - TDD 中身をわかっている　ホワイトボックス　コードの構造を考えていく　
     - BDD 中身わからない　ブラックボックス　振る舞い
2. HIKIとは
   - hiki　wikiの一種
   - wiki  cms(contents management system)の一種
   - hiki記法　markuplanguage
3.RSPECとCUCUMBERの関係性　
　 - rspec rubyが用意しているテストの環境の一種 minitest utest(unittest)
   - cucumber BDDの環境 rspecの上に乗るようなsoftware
4.図6がRSPECで実行しているのにCUCUMBERの実行結果となっているのはなぜか
  そういう関係性だから
5.図7，図8がCUCUMBERで実行しているのにRSPECの実行結果となっているのはなぜか
 
** 課題
roman_numeralsをrspecでテストする．

* my_help install<2019-06-17 月 13:49>
my_helpをinstallしました．
 
1. my
2. my_help list
3. my_help new blog
4. my_help edit blog
であとは，orgの使い方
** data and time stamp(ここはasterisk二つ)

- C-u C-c .
- C-c . (date only +1 -2)

** show all
- shift-tab

* read graduation thesis<2019-06-19 水 10:57>
那須さんの卒業研究を読みました．

** Behaviour-Driven Development(BDD)
ビヘイビア駆動開発

1. テスト駆動開発TDDの工程の理解を深めるものであり，説明するためのもの
2. TDDのイメージは構造のテストを中心とするものであるのに対して，BDDはソフトの振る舞いを中心とする．
** Aim of BDD
ソフトウェアが使われる状況を説明するための言語を単純化すること，ソフトウェア開発チームのコミュニケーションを後押しすること．
* read graduation thesis<2019-06-20 木 17:58>
** Cucumber and Rspec
1.Cucumberで一つのシナリオに焦点を当て,その振る舞いの主要点をかく.(一つずつ書いていく)

2.それぞれの主要点を実現するステップに分けて使用を決めていく．(TDDのred,green,refactoringの前に行う[使用を決める作業]に対応)

3.RSpecでテストコードを書き，red,green,refactoringを行う．

4.RSepecが成功すると，Cucumberのrefactoringを行う．

* read graduation thesis<2019-06-21 金 18:47>
** Regexp
正規表現

** hiki format
HTTPS://GITHUB.COM/RUBIMA/RUBIMA/WIKI/HIKIFORMAT
